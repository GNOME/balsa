dnl ###########################################################################
dnl Startup
dnl ###########################################################################

AC_INIT(src/main.c)
AM_CONFIG_HEADER(config.h)

dnl ###########################################################################
dnl Versioning
dnl   BALSA_VERSION is what we use.
dnl ###########################################################################

BALSA_MAJOR=1
BALSA_REVISION=3
BALSA_PATCHLEVEL=7

BALSA_VERSION="$BALSA_MAJOR.$BALSA_REVISION.${BALSA_PATCHLEVEL}"
VERSION="$BALSA_VERSION"

dnl ###########################################################################
dnl Configure libmutt, later
dnl ###########################################################################

AC_CONFIG_SUBDIRS(libmutt)

dnl ###########################################################################
dnl Now that we have versioning, checks and stuff
dnl ###########################################################################


AM_INIT_AUTOMAKE(balsa, [$VERSION])


AM_MAINTAINER_MODE
AM_ACLOCAL_INCLUDE(macros)

GNOME_INIT

AC_PROG_CC
AC_ISC_POSIX
AC_STDC_HEADERS
AC_PROG_YACC
AM_PROG_LIBTOOL

AM_PATH_GLIB([1.2.0],[],[
	AC_MSG_ERROR([You need GLib installed -- GNOME requires this as well.])
],gthread)

dnl this should come after `AC_PROG_CC'
GNOME_X_CHECKS

AC_CHECK_LIB(pspell, new_pspell_manager,,[
	AC_MSG_ERROR([*** libpspell(-devel) not found.  Please check http://balsa.gnome.org/ for information on the required files.])
], -lstdc++ -lpspell-modules)

dnl Reset
# LDFLAGS="$balsa_save_LDFLAGS"
# LIBS="$balsa_save_LIBS"


dnl ###########################################################################
dnl Check for a recent enough version of gnome-libs.
dnl ###########################################################################

AC_MSG_CHECKING([for gnome-libs version >= 1.2.13])
vers=`gnome-config --version gnome-libs | sed 's/^gnome-libs //'`
case $vers in
	1.0.*|1.2.[0-9])
		AC_MSG_RESULT([no])
		AC_MSG_ERROR([Balsa requires a version of gnome-libs newer than 1.2.1] )
		;;
	*) 
		AC_MSG_RESULT([yes])
		;;
esac
gnome_libs="glib gtk gnome gnomeui"

dnl ###########################################################################
dnl Check for gnome-window-icon stuff.
dnl ###########################################################################
AC_CHECK_HEADERS(libgnomeui/gnome-window-icon.h)
AC_SUBST(HAVE_LIBGNOMEUI_GNOME_WINDOW_ICON_H)

AC_CHECK_HEADERS(locale.h)
dnl ###########################################################################
dnl Check for gnome database manager header
dnl ###########################################################################
dnl AC_CHECK_HEADERS(gdbm.h, GDBM_LIBS="-lgdbm", GDBM_LIBS="")
dnl AC_SUBST(GDBM_LIBS)

dnl ###########################################################################
dnl Check for gnome-print
dnl ###########################################################################

AM_PATH_GNOME_PRINT([0.25.0], [
	AC_DEFINE(HAVE_GNOME_PRINT,1,
                  [Define whether printing support should be enabled.])
	printing_support=yes
	gnome_libs="$gnome_libs print"
], [ 
   printing_support="no (gnome-print(-devel) >= 0.25 required)"
])


dnl ###########################################################################
dnl All the linguas, all the time.
dnl ###########################################################################

ALL_LINGUAS="az bg ca cs da de en_GB el es et fi fr ga hu it ja ko lt ms nl no nn pl pt pt_BR ro ru sk sl sv tr uk vi wa zh_CN zh_TW"
LINGUAS="$ALL_LINGUAS"

dnl ########################################################################
dnl configure gettext: po directory, set USE_NLS etc
dnl ########################################################################

AM_GNU_GETTEXT

dnl ###########################################################################
dnl Substitutions, defines, part I
dnl ###########################################################################

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

dnl No choice about this
gnome_cv_use_gnome=yes

AC_DEFINE_UNQUOTED(BALSA_MAJOR, $BALSA_MAJOR, [ major version number ])
AC_DEFINE_UNQUOTED(BALSA_REVISION, $BALSA_REVISION, [ revision number ])
AC_DEFINE_UNQUOTED(BALSA_PATCHLEVEL, $BALSA_PATCHLEVEL, [ patch level ])
AC_DEFINE_UNQUOTED(BALSA_VERSION, "$BALSA_VERSION", [ complete version number])

dnl ###########################################################################
dnl More checks
dnl ###########################################################################

AC_CHECK_LIB(crypt, crypt)

dnl these may be used later.
dnl AC_CHECK_LIB(des, des_encrypt)
dnl AC_CHECK_LIB(krb, krb_sendauth)
dnl AC_CHECK_LIB(acap, acap_OpenConnection)

AC_MSG_CHECKING([for isblank])
AC_TRY_LINK( [#include <ctype.h>], [return isblank('a');],
	     AC_MSG_RESULT(yes),
	     [AC_MSG_RESULT(no)
	      AC_DEFINE(isblank,isspace,
                   [Define if isspace should be used instead of isblank.])] )

dnl AM_HDR_SIGACTION
dnl AM_HDR_SIGSET

dnl ###########################################################################
dnl ORBit support
dnl Use 'failure' instead of 'dontfail' to make us bomb if no orbit. 
dnl Probably should use 'failure'.
dnl ###########################################################################
dnl
dnl # No more IDL
dnl
dnl GNOME_ORBIT_HOOK([],dontfail)
dnl AM_CONDITIONAL(ORBIT_INSTALLED, test -n "$ORBIT_LIBS")

dnl ###########################################################################
dnl More substitutions
dnl ###########################################################################

AC_SUBST(BALSA_MAJOR)
AC_SUBST(BALSA_REVISION)
AC_SUBST(BALSA_PATCHLEVEL)
AC_SUBST(BALSA_RELEASE)
AC_SUBST(BALSA_VERSION)

AC_SUBST(LIBESD_LIB)

dnl ###########################################################################
dnl Use threading?
dnl ###########################################################################

AC_ARG_ENABLE(threads, [  --enable-threads        Use threading for mail retrieval [default=yes]],[
	use_threads=$enableval
],[
	use_threads=yes
])

AC_MSG_CHECKING([whether to use threads])
if test x"$use_threads" = xyes ; then
	AC_MSG_RESULT([yes])
	if test ! -z `$GLIB_CONFIG --help 2>&1 |grep 'gthread'` ; then
		THREAD_CFLAGS=`$GLIB_CONFIG --cflags gthread`
		THREAD_LIBS=`$GLIB_CONFIG --libs gthread`
		CFLAGS="$CFLAGS $THREAD_CFLAGS"
		LIBS="$LIBS $THREAD_LIBS"
		AC_DEFINE(BALSA_USE_THREADS,1, 
		[ define if balsa should use threads.])
	else
		AC_MSG_ERROR([Balsa requires GThread from GLib to use threading.])
	fi
else
	AC_MSG_RESULT([no])
fi

dnl ###########################################################################
dnl Check for gnome-vfs
dnl ###########################################################################
AC_ARG_ENABLE(gnome-vfs, [  --enable-gnome-vfs      Use Gnome-VFS to determine attachment types [default=yes]],
		[ use_gnome_vfs=$enableval ],[ use_gnome_vfs=yes ])

AC_MSG_CHECKING(whether to use Gnome-VFS)
if test x"$use_gnome_vfs" = xyes ; then
    AC_MSG_RESULT(yes)
    AC_MSG_CHECKING(whether Gnome-VFS is available)
    if gnome-config --libs vfs > /dev/null 2>&1; then
	AC_MSG_RESULT(yes)
	gnome_libs="$gnome_libs vfs oaf"
	AC_DEFINE(HAVE_GNOME_VFS,1,[Define whether GNOME VFS is available.])
    else
	AC_MSG_RESULT(no)
	AC_MSG_RESULT([Gnome-VFS(-devel) library is not available.  It is highly])
	AC_MSG_RESULT([recommended that you obtain this library before building balsa])
    fi
else
    AC_MSG_RESULT(no)
    AC_MSG_RESULT([Gnome-VFS has been disabled.  It is highly recommended])
    AC_MSG_RESULT([that you build balsa with Gnome-VFS enabled.])
fi

dnl ##########################################################################
dnl Check for GdkPixbuf if available
dnl I guess we could safely assome everybody has got this one, couldn't we?
dnl ##########################################################################
AC_MSG_CHECKING(whether to GdkPixbuf is available)
if gnome-config --libs gdk_pixbuf > /dev/null 2>&1; then
	gnome_libs="$gnome_libs gdk_pixbuf"
       	AC_MSG_RESULT(yes)
else
    AC_MSG_ERROR([gdk-pixbuf(-devel) library is needed to build balsa])
fi

dnl ##########################################################################
dnl Check for GtkHTML if available
dnl ##########################################################################

AC_ARG_ENABLE([gtkhtml], [  --enable-gtkhtml        Use GtkHTML if available (experimental) [default=yes]],[
	check_gtkhtml=$enableval
],[
	check_gtkhtml=yes
])

AC_MSG_CHECKING(whether to use GtkHTML)
if test x"$check_gtkhtml" = xyes ; then
	if gnome-config --libs gtkhtml > /dev/null 2>&1; then
        	vers=`gnome-config --modversion gtkhtml | sed 's/^gtkhtml-//'`
	        case $vers  in
                       0.[0123])
                               have_gtkhtml=no ;;
                       *) 
                               have_gtkhtml=yes ;;
        	esac
	else
        	have_gtkhtml=no
	fi
	if test x"$have_gtkhtml" = xyes ; then
	       	AC_MSG_RESULT(yes)
		gnome_libs="$gnome_libs gtkhtml"
		AC_DEFINE(HAVE_GTKHTML,1,[Define if GtkHtml should be used.])
	else
	        AC_MSG_RESULT(not found)
	fi
else
	have_gtkhtml=no
	AC_MSG_RESULT(no)
fi


dnl ##########################################################################
dnl Install into gnome locations? (may require priveliges that we don't have)
dnl ##########################################################################

AC_ARG_ENABLE([system-install], [  --disable-system-install Don't install some files into Gnome's prefix],[
	use_system_install=$enableval
],[
	if test x"$BALSA_DISTCHECK_HACK" = xyes ; then
		use_system_install=no
	else
		use_system_install=yes
	fi
])

AC_MSG_CHECKING([whether to install into Gnome's prefix])
if test x"$use_system_install" = xyes ; then
	AC_MSG_RESULT([yes])
	gnomedatadir=`${GNOME_CONFIG} --datadir`
	gnomeconfdir=`${GNOME_CONFIG} --sysconfdir`
else
	AC_MSG_RESULT([no])
	gnomedatadir=\${datadir}
	gnomeconfdir=\${sysconfdir}
fi

AC_SUBST(gnomedatadir)
AC_SUBST(gnomeconfdir)

dnl ###########################################################################
dnl Remember our prefixes
dnl   The way prefix et al are defined makes us jump through some hoops.
dnl ###########################################################################

dnl datadir='${prefix}/share', so we must eval it or something. This works
BALSA_STD_PREFIX=`eval "echo ${prefix}"`
BALSA_DATA_PREFIX=`eval "echo ${datadir}"`
GNOME_STD_PREFIX=`${GNOME_CONFIG} --prefix`
GNOME_LIB_PREFIX=`${GNOME_CONFIG} --libdir`
GNOME_DATA_PREFIX=`${GNOME_CONFIG} --datadir`

dnl Consolidate them!
AC_PROG_AWK
BALSA_COMMON_PREFIXES=`sort<<EOF|uniq|${AWK} '{if(l!~/^$/)print l ",";l=$0}END{print l}'
"${BALSA_STD_PREFIX}"
"${BALSA_DATA_PREFIX}"
"${GNOME_STD_PREFIX}"
"${GNOME_DATA_PREFIX}"
"${GNOME_LIB_PREFIX}"
EOF
`

dnl Better way to do this?
AC_DEFINE_UNQUOTED( BALSA_STD_PREFIX, "$BALSA_STD_PREFIX", 
		    [ standard directory prefix ])
AC_DEFINE_UNQUOTED( BALSA_DATA_PREFIX, "$BALSA_DATA_PREFIX", 
		    [ directory prefix for storing data files ] )
AC_DEFINE_UNQUOTED( GNOME_STD_PREFIX, "$GNOME_STD_PREFIX",
                    [GNOME standard prefix.] )
AC_DEFINE_UNQUOTED( GNOME_LIB_PREFIX, "$GNOME_LIB_PREFIX",
                    [GNOME library prefix.] )
AC_DEFINE_UNQUOTED( GNOME_DATA_PREFIX, "$GNOME_DATA_PREFIX", 
                    [GNOME data directory.] )
AC_DEFINE_UNQUOTED( BALSA_COMMON_PREFIXES, `echo $BALSA_COMMON_PREFIXES`,
                    [Common file prefixes.] ) 
dnl bleah

dnl #########################################################################
dnl  Check for LDAP if available.
dnl  For now, only look for OpenLDAP?
dnl #########################################################################

AC_ARG_ENABLE([ldap], [  --enable-ldap           Use OpenLDAP if available [default=no]],[
	use_ldap=$enableval
],[
	use_ldap=no
])
AC_MSG_CHECKING(whether to use LDAP)
if test x"$use_ldap" = xyes ; then
	AC_MSG_RESULT([yes])
	AC_CHECK_LIB(ldap, ldap_search, 
             AC_DEFINE(ENABLE_LDAP,1,
                       [Define if LDAP address books should be enabled])
             LIBS="-lldap -llber -lresolv $LIBS", AC_MSG_ERROR([*** You enabled LDAP but ldap library is not found.]), -llber -lresolv)
else
	AC_MSG_RESULT([no])
fi

dnl ##########################################################################
dnl Have ESMTP ?
dnl ##########################################################################

AC_ARG_WITH(esmtp, [  --with-esmtp=DIR        Enable libESMTP [default=yes]],[
	with_esmtp=$withval
],[
	with_esmtp=yes
])


AC_MSG_CHECKING([whether to build ESMTP support])
if test "x$with_esmtp" != xno  ; then
    AC_MSG_RESULT([yes])
    test "$with_esmtp" != yes && LIBS="$LIBS -L$with_esmtp/lib"
    AC_CHECK_LIB(esmtp, smtp_start_session, LIBS="$LIBS -lesmtp -lpthread",
	AC_MSG_ERROR([*** You enabled ESMTP but esmtp library is not found.]))
    AC_CHECK_LIB(esmtp, smtp_option_require_all_recipients, 
                 AC_DEFINE(ENABLE_ESMTP,1,
                           [Define if ESMTP support is to be enabled.]),
	AC_MSG_ERROR([*** You enabled ESMTP but esmtp library doesn't support
	    'require_all_recipients'. Please get a Balsa aware
	    libESMTP from http://balsa.gnome.org/main.html or compile
	    libESMTP with './configure --enable-require-all-recipients'.]))
    AC_CHECK_LIB(esmtp, smtp_starttls_set_password_cb,
	AC_DEFINE(HAVE_SMTP_TLS_CLIENT_CERTIFICATE,1,
                  [Define if support for TLS client certificate is to be enabled.]))
    AC_CHECK_HEADER(libesmtp.h, ,
        	AC_MSG_ERROR([*** You enabled ESMTP but libestmp.h header
            is not found. Either it is installed in a not standard location
            or you are missing a libesmtp-devel package (or corresponding).]))
else
    AC_MSG_RESULT([no])
fi



dnl ##########################################################################
dnl Enable SASL?
dnl ##########################################################################


dnl AC_ARG_WITH(sasl, [  --with-sasl            Use Cyrus SASL library for POP/IMAP authentication [default=no]],[
dnl 	with_sasl=$withval
dnl ],[
dnl 	with_sasl=no
dnl ])
dnl 
dnl AC_MSG_CHECKING([whether to build SASL support])
dnl if test "x$with_sasl" != xno  ; then
dnl 	AC_MSG_RESULT([yes])
dnl 	AC_CHECK_LIB(sasl, sasl_client_init,,AC_MSG_ERROR([could not find libsasl]),)
dnl 	LIBS="$LIBS -lsasl"
dnl 	AC_DEFINE(USE_SASL)
dnl 	need_sasl=yes
dnl         need_md5=no        
dnl else
dnl 	need_sasl=no
dnl 	AC_MSG_RESULT([no])
dnl fi
dnl AM_CONDITIONAL(USE_SASL, test x$need_sasl = xyes)


dnl #############################################################
dnl Link with iconv for charset translation, if not found
dnl without library.  Needed for libmutt and balsa itself.
dnl #############################################################
AC_ARG_WITH(iconv,
            [  --with-iconv=DIR        Where libiconv is installed ],
           [if test "$with_iconv" != yes -a "$with_iconv" != no ; then
                   CPPFLAGS="-I${with_iconv}/include $CPPFLAGS"
                   LDFLAGS="-L${with_iconv}/lib $LDFLAGS"
            fi])

AC_CHECK_LIB(iconv, iconv_open, , [
	AC_CHECK_FUNC(iconv_open, , [
			AC_MSG_ERROR([*** You need iconv for balsa.])
			])
	])

dnl ##########################################################################
dnl Check for PCRE if available
dnl ##########################################################################

AC_ARG_ENABLE([pcre], 
	[  --enable-pcre           Use Perl-compatible regular expressions if available [default=yes]],[
	check_pcre=$enableval],[
	check_pcre=yes
])

AC_MSG_CHECKING(whether to use PCRE)
if test x"$check_pcre" = xyes ; then
	if pcre-config --libs-posix > /dev/null 2>&1; then
        	vers=`pcre-config --version`
	        case $vers
        	in
                       2.*)
                               have_pcre=no ;;
                       *) 
                               have_pcre=yes ;;
        	esac
	else
        	have_pcre=no
	fi

	if test x"$have_pcre" = xyes ; then
	       	AC_MSG_RESULT(yes)
		CFLAGS="$CFLAGS `pcre-config --cflags-posix`"
		LIBS="$LIBS `pcre-config --libs-posix`"
		AC_DEFINE(HAVE_PCRE,1,
		[Define if Perl Regular expressions library is to be used.])
	else
	        AC_MSG_RESULT(not found)
	fi
else
	have_pcre=no
	AC_MSG_RESULT(no)
fi

AC_SUBST(PCRE_CFLAGS)
AC_SUBST(PCRE_LIBS)

dnl ##########################################################################
dnl Detected all the gnome libs, add them to the list.
dnl ##########################################################################

CFLAGS="$CFLAGS `gnome-config --cflags $gnome_libs`"
if test "$gnome_libs" != "" ; then 
	LIBS="$LIBS `gnome-config --libs $gnome_libs`"
	echo "GNOME libs to link against: $gnome_libs"
fi

dnl ##########################################################################
dnl Enable SSL?
dnl ##########################################################################

AC_ARG_WITH(ssl, [  --with-ssl              Enable SSL [default=no]],[
	with_ssl=$withval
],[
	with_ssl=no
])

AC_MSG_CHECKING([whether to build SSL support])
if test "x$with_ssl" != xno  ; then
   if test -d $with_ssl && test -f "$with_ssl/include/openssl/ssl.h" ; then
      ssldir=$with_ssl
   else
        AC_TRY_COMPILE([#include <openssl/ssl.h>], ,
			ssldir=default,
			ssldir="")
	if test "x$ssldir" = x ; then
           for prefixdir in /usr /usr/local /usr/lib /usr/pkg /var /opt; do
               for dir in $prefixdir $prefixdir/openssl $prefixdir/ssl; do
                   if test -f "$dir/include/openssl/ssl.h"; then
                      ssldir=$dir
                   fi
               done
           done
	fi
   fi
fi

if test "x$with_ssl" != xno; then
   if test -z "$ssldir"; then
      AC_MSG_ERROR([SSL requested but no SSL headers found.])
   else
        AC_MSG_RESULT(yes)
        LIBS="$LIBS -lssl -lcrypto"
	if test "x$ssldir" != xdefault ; then
		CPPFLAGS="-I${ssldir}/include $CPPFLAGS"
	fi
	ac_cv_path_openssl=$ssldir
	AC_DEFINE(USE_SSL,1,
                  [Define if SSL connection encryption should be compiled.])
   fi
else
   AC_MSG_RESULT(no)
fi

dnl ##########################################################################
dnl Enable GSS?
dnl ##########################################################################

dnl processing for this option is done in libmutt configure...
AC_ARG_WITH(gss, [  --with-gss              Enable GSS [default=no]],
    [with_gss=$withval],[with_gss=no])

dnl ###########################################################################
dnl Test whether jw is installed
dnl ###########################################################################
AC_PATH_PROG(JW,jw,no)
if test x$JW = xno; then
  HAVE_JW="no"
else
  HAVE_JW="yes"
fi
AM_CONDITIONAL(HAVE_JW, test "x$HAVE_JW" = "xyes")
AC_SUBST(HAVE_JW)

dnl ###########################################################################
dnl turn warnings into errors to enforce clean code
dnl ###########################################################################


AC_ARG_ENABLE(more-warnings,
[  --enable-more-warnings  Enable maximum compiler warnings [default=yes]],
set_more_warnings="$enableval", set_more_warnings=yes)

if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
	for option in -Wsign-promo -Wsign-compare -Wpointer-arith -Wnested-externs -Wchar-subscripts -Wuninitialized -Wmissing-prototypes -Wreturn-type -Wimplicit; do
                SAVE_CFLAGS="$CFLAGS"
                CFLAGS="$CFLAGS $option"
                AC_MSG_CHECKING([whether gcc understands $option])
                AC_TRY_COMPILE([], [],
                        has_option=yes,
                        has_option=no,)
                if test $has_option = no; then
                  CFLAGS="$SAVE_CFLAGS"
                fi
                AC_MSG_RESULT($has_option)
                unset has_option
                unset SAVE_CFLAGS
        done
        unset option
fi

dnl ###########################################################################
dnl Check for CVS nature, for warnings + extra program checks
dnl have it at the end so configure tests do not die on warnings.
dnl ###########################################################################

if test -d "${srcdir}/CVS" ; then
	BALSA_FROM_CVS=yes
	CFLAGS="$CFLAGS -Werror"
else
	BALSA_FROM_CVS=no
fi

dnl ########################################################################
dnl some gnome configure scripts add -I/usr/include to CFLAGS that
dnl triggers a gcc warning.
dnl ########################################################################
CFLAGS=`echo $CFLAGS | sed 's,-I/usr/include ,,g'`

AC_MSG_CHECKING([for CVS information])
AC_MSG_RESULT($BALSA_FROM_CVS)

dnl ##########################################################################
dnl Create files.
dnl ##########################################################################

AC_OUTPUT([ intl/Makefile po/Makefile.in m4/Makefile 
Makefile
balsa.1
balsa.spec
help/C/Makefile
help/Makefile
images/Makefile
intl/Makefile
libbalsa/Makefile
libinit_balsa/Makefile
macros/Makefile
po/Makefile.in
sounds/Makefile
src/Makefile
])

dnl ##########################################################################
dnl Summary
dnl ##########################################################################

echo ""
echo "================ Final configuration ==================="
echo "    Installing into prefix: $prefix"
echo "      Using multithreading: $use_threads"
echo "Installing some files into  "
echo "            Gnome's prefix: $use_system_install (may require root privileges)"
echo "   Enable compile warnings: $set_more_warnings"
echo "                Use ESMTP : $with_esmtp"
echo "               Use GtkHTML: $have_gtkhtml"
echo "                  Use LDAP: $use_ldap"
echo "                   Use GSS: $with_gss"
echo "                   Use SSL: $with_ssl"
dnl echo "                  Use SASL: $need_sasl"
echo "          Printing support: $printing_support"
echo ""

if test x"$BALSA_FROM_CVS" = xyes ; then
	echo "============================== NOTICE ================================"
	echo "                 You are using Balsa from CVS source."
	echo "  The program is likely to be unstable, contain incomplete features,"
	echo "or just plain not work. Use it at your own risk. You have been warned."
	echo "======================================================================"
	echo ""
fi

dnl -*- mode: m4 -*-
AC_INIT(src/balsa-app.h)
AC_PREREQ(2.52)
dnl ###########################################################################
dnl Versioning
dnl ###########################################################################

SCROLLKEEPER_REQUIRED=0.1.4
BALSA_MAJOR=2
BALSA_REVISION=0
BALSA_PATCHLEVEL=0
BALSA_VERSION="$BALSA_MAJOR.$BALSA_REVISION.${BALSA_PATCHLEVEL}"

AC_SUBST(BALSA_MAJOR)
AC_SUBST(BALSA_REVISION)
AC_SUBST(BALSA_PATCHLEVEL)
AC_SUBST(BALSA_VERSION)

AM_INIT_AUTOMAKE(balsa, "$BALSA_MAJOR.$BALSA_REVISION.${BALSA_PATCHLEVEL}")
AC_CONFIG_SRCDIR(src/main.c)
AM_CONFIG_HEADER(config.h)

AM_MAINTAINER_MODE

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AM_PROG_LIBTOOL
AC_PROG_INTLTOOL
AM_HDR_SIGACTION
AM_HDR_SIGSET

AC_DEFINE_UNQUOTED(BALSA_MAJOR, $BALSA_MAJOR,
                   [Define to the Balsa major version])
AC_DEFINE_UNQUOTED(BALSA_REVISION, $BALSA_REVISION,
                   [Define to the Balsa revision])
AC_DEFINE_UNQUOTED(BALSA_PATCHLEVEL, $BALSA_PATCHLEVEL,
                   [Define to the Balsa patch level])
AC_DEFINE_UNQUOTED(BALSA_VERSION, "$BALSA_VERSION",
                   [Define to the Balsa version])

dnl ##########################################################################
dnl Check for GtkHTML if available
dnl ##########################################################################

AC_MSG_CHECKING(whether to use GtkHTML)
AC_ARG_ENABLE([gtkhtml], [  --enable-gtkhtml Use GtkHTML if available (experimental) [default=yes]],[
	use_gtkhtml=$enableval
],[
	use_gtkhtml=yes
])
AC_MSG_RESULT($use_gtkhtml)

if test x"$use_gtkhtml" = xyes ; then 
        gnome_extras="$gnome_extras libgtkhtml-2.0"
         # define it, pkg-config will fail in the worst case.
        AC_DEFINE(HAVE_GTKHTML)
fi

dnl ###########################################################################
dnl Use the new GNOME2 pkgconfig to check required modules
dnl ###########################################################################
PKG_CHECK_MODULES(BALSA, [
glib-2.0
libgnome-2.0
libgnomeui-2.0
gtk+-2.0
gnome-vfs-2.0
libgnomeprint-2.0 >= 1.106.0
libgnomeprintui-2.0 >= 1.106.0
$gnome_extras
])
AC_SUBST(BALSA_CFLAGS)
AC_SUBST(BALSA_LIBS)
AC_SUBST(PTHREAD_LIB)

dnl ###########################################################################
dnl Check for documentation requirements
dnl ###########################################################################
AC_SUBST(SCROLLKEEPER_REQUIRED)
AC_PATH_PROG(SCROLLKEEPER_CONFIG, scrollkeeper-config,no)
if test x$SCROLLKEEPER_CONFIG = xno; then
      AC_MSG_ERROR(Couldn't find scrollkeeper-config, please install the scrollkeeper package)
fi

AC_PATH_PROG(JW,jw,no)
if test x$JW = xno; then
    HAVE_JW="no"
else
    HAVE_JW="yes"
fi
AM_CONDITIONAL(HAVE_JW, test "x$HAVE_JW" = "xyes")
AC_SUBST(HAVE_JW)

dnl ###########################################################################
dnl Configure libmutt, later
dnl ###########################################################################

AC_CONFIG_SUBDIRS(libmutt)


AC_CHECK_LIB(pspell, new_pspell_manager,,[
	AC_MSG_ERROR([*** libpspell(-devel) not found.  Please check http://www.balsa.net for information on the required files.])
], -lstdc++ -lpspell-modules)

dnl Reset
# LDFLAGS="$balsa_save_LDFLAGS"
# LIBS="$balsa_save_LIBS"


dnl ###########################################################################
dnl All the linguas, all the time.
dnl ###########################################################################

ALL_LINGUAS="az bg ca cs da de en_GB el es et fi fr ga hu it ja ko lt nl no nn pl pt pt_BR ro ru sk sl sv tr uk wa zh_CN zh_TW"
GETTEXT_PACKAGE=balsa
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE")
AM_GLIB_GNU_GETTEXT
# AM_GNOME_GETTEXT above substs $DATADIRNAME
# this is the directory where the *.{mo,gmo} files are installed
gnomelocaledir='${prefix}/${DATADIRNAME}/locale'
AC_SUBST(gnomelocaledir)

dnl ###########################################################################
dnl More checks
dnl ###########################################################################

dnl these may be used later.
dnl AC_CHECK_LIB(des, des_encrypt)
dnl AC_CHECK_LIB(krb, krb_sendauth)
dnl AC_CHECK_LIB(acap, acap_OpenConnection)

AC_MSG_CHECKING([for isblank])
AC_TRY_LINK( [#include <ctype.h>], [return isblank('a');],
	     AC_MSG_RESULT(yes),
	     [AC_MSG_RESULT(no)
	      AC_DEFINE(isblank,isspace)] )

dnl ###########################################################################
dnl ORBit support
dnl Use 'failure' instead of 'dontfail' to make us bomb if no orbit. 
dnl Probably should use 'failure'.
dnl ###########################################################################
dnl
dnl # No more IDL
dnl
dnl GNOME_ORBIT_HOOK([],dontfail)
dnl AM_CONDITIONAL(ORBIT_INSTALLED, test -n "$ORBIT_LIBS")


dnl ###########################################################################
dnl Enable all? (=broken stuff)
dnl ###########################################################################

AC_DEFINE(BALSA_SHOW_ALL, true)
AM_CONDITIONAL(BALSA_SHOW_ALL, true)

dnl ###########################################################################
dnl Use threading?
dnl ###########################################################################

AC_ARG_ENABLE(threads, [  --enable-threads        Use threading for mail retrieval [default=yes]],[
	use_threads=$enableval
],[
	use_threads=yes
])

if test x"$use_threads" = xyes; then 
        AC_DEFINE(BALSA_USE_THREADS, 1)
fi

dnl ###########################################################################
dnl Remember our prefixes
dnl   The way prefix et al are defined makes us jump through some hoops.
dnl ###########################################################################

dnl datadir='${prefix}/share', so we must eval it or something. This works
BALSA_STD_PREFIX=`eval "echo ${prefix}"`
BALSA_DATA_PREFIX=`eval "echo ${datadir}"`

dnl Consolidate them!
AC_PROG_AWK
BALSA_COMMON_PREFIXES=`sort<<EOF|uniq|${AWK} '{if(l!~/^$/)print l ",";l=$0}END{print l}'
"${BALSA_STD_PREFIX}"
"${BALSA_DATA_PREFIX}"
EOF
`

dnl Better way to do this?
AC_DEFINE_UNQUOTED( BALSA_STD_PREFIX, "$BALSA_STD_PREFIX" )
AC_DEFINE_UNQUOTED( BALSA_DATA_PREFIX, "$BALSA_DATA_PREFIX" )
AC_DEFINE_UNQUOTED( BALSA_COMMON_PREFIXES, `echo $BALSA_COMMON_PREFIXES` ) 
dnl bleah

dnl #########################################################################
dnl  Check for LDAP if available.
dnl  For now, only look for OpenLDAP?
dnl #########################################################################

AC_ARG_ENABLE([ldap], [  --enable-ldap Use OpenLDAP if available [default=no]],[
	use_ldap=$enableval
],[
	use_ldap=no
])
AC_MSG_CHECKING(whether to use LDAP)
if test x"$use_ldap" = xyes ; then
	AC_MSG_RESULT([yes])
	AC_CHECK_LIB(ldap, ldap_search, AC_DEFINE(ENABLE_LDAP) LIBS="-lldap -llber -lresolv $LIBS", AC_MSG_ERROR([*** You enabled LDAP but ldap library is not found.]), -llber -lresolv)
else
	AC_MSG_RESULT([no])
fi

dnl ##########################################################################
dnl Have ESMTP ?
dnl ##########################################################################

AC_ARG_WITH(esmtp, [  --with-esmtp	        Enable libESMTP [default=yes]],[
	with_esmtp=$withval
],[
	with_esmtp=yes
])


AC_MSG_CHECKING([whether to build ESMTP support])
if test "x$with_esmtp" != xno  ; then
    AC_MSG_RESULT([yes])
    test "$with_esmtp" != yes && LIBS="$LIBS -L$with_esmtp/lib"
    AC_CHECK_LIB(esmtp, smtp_start_session, LIBS="$LIBS -lesmtp -lpthread",
	AC_MSG_ERROR([*** You enabled ESMTP but esmtp library is not found.]),
                 -lpthread)
    AC_CHECK_LIB(esmtp, smtp_option_require_all_recipients, AC_DEFINE(ENABLE_ESMTP),
	AC_MSG_ERROR([*** You enabled ESMTP but esmtp library doesn't support
	    'require_all_recipients'. Please get a Balsa aware
	    libESMTP from http://balsa.gnome.org/main.html or compile
	    libESMTP with './configure --enable-require-all-recipients'.]))
    AC_CHECK_LIB(esmtp, smtp_starttls_set_password_cb,
	AC_DEFINE(HAVE_SMTP_TLS_CLIENT_CERTIFICATE))
else
    AC_MSG_RESULT([no])
fi
echo "here LIBS=$LIBS"

dnl ##########################################################################
dnl Enable SASL?
dnl ##########################################################################


dnl AC_ARG_WITH(sasl, [  --with-sasl            Use Cyrus SASL library for POP/IMAP authentication [default=no]],[
dnl 	with_sasl=$withval
dnl ],[
dnl 	with_sasl=no
dnl ])
dnl 
dnl AC_MSG_CHECKING([whether to build SASL support])
dnl if test "x$with_sasl" != xno  ; then
dnl 	AC_MSG_RESULT([yes])
dnl 	AC_CHECK_LIB(sasl, sasl_client_init,,AC_MSG_ERROR([could not find libsasl]),)
dnl 	LIBS="$LIBS -lsasl"
dnl 	AC_DEFINE(USE_SASL)
dnl 	need_sasl=yes
dnl         need_md5=no        
dnl else
dnl 	need_sasl=no
dnl 	AC_MSG_RESULT([no])
dnl fi
dnl AM_CONDITIONAL(USE_SASL, test x$need_sasl = xyes)


dnl #############################################################
dnl Some systems have extra libiconv replacing iconv functions from
dnl libc. Use this library if requested.
dnl #############################################################
AC_ARG_WITH(iconv,      
           [  --with-iconv=DIR           Where libiconv is installed ],
           [if test "$with_iconv" != yes -a "$with_iconv" != no ; then
                   CPPFLAGS="-I${with_iconv}/include $CPPFLAGS"
                   LDFLAGS="-L${with_iconv}/lib $LDFLAGS"
            fi])
 AC_CHECK_LIB(iconv, iconv_open, , [
 AC_CHECK_FUNC(iconv_open, , [
 	AC_MSG_ERROR([*** You need iconv for balsa.])
  ])
])

dnl ##########################################################################
dnl Check for PCRE if available
dnl ##########################################################################

AC_ARG_ENABLE([pcre], 
	[  --enable-pcre           Use Perl-compatible regular expressions if available [default=yes]],[
	check_pcre=$enableval],[
	check_pcre=yes
])

AC_MSG_CHECKING(whether to use PCRE)
if test x"$check_pcre" = xyes ; then
	if pcre-config --libs-posix > /dev/null 2>&1; then
        	vers=`pcre-config --version`
	        case $vers
        	in
                       2.*)
                               have_pcre=no ;;
                       *) 
                               have_pcre=yes ;;
        	esac
	else
        	have_pcre=no
	fi

	if test x"$have_pcre" = xyes ; then
	       	AC_MSG_RESULT(yes)
		BALSA_CFLAGS="$BALSA_CFLAGS `pcre-config --cflags-posix`"
                PCRE_LIBS="`pcre-config --libs-posix`"
                AC_SUBST(PCRE_LIBS)
		BALSA_LIBS="$BALSA_LIBS $PCRE_LIBS"
		AC_DEFINE(HAVE_PCRE)
	else
	        AC_MSG_RESULT(not found)
	fi
else
	have_pcre=no
	AC_MSG_RESULT(no)
fi

dnl ##########################################################################
dnl Enable SSL?
dnl ##########################################################################

AC_ARG_WITH(ssl, [  --with-ssl            Enable SSL [default=no]],[
	with_ssl=$withval
],[
	with_ssl=no
])

AC_MSG_CHECKING([whether to build SSL support])
if test "x$with_ssl" != xno  ; then
   if test -d $with_ssl && test -f "$with_ssl/include/openssl/ssl.h" ; then
      ssldir=$with_ssl
   else
        AC_TRY_COMPILE([#include <openssl/ssl.h>], ,
			ssldir=default,
			ssldir="")
	if test "x$ssldir" = x ; then
           for prefixdir in /usr /usr/local /usr/lib /usr/pkg /var /opt; do
               for dir in $prefixdir $prefixdir/openssl $prefixdir/ssl; do
                   if test -f "$dir/include/openssl/ssl.h"; then
                      ssldir=$dir
                   fi
               done
           done
	fi
   fi
fi

if test "x$with_ssl" != xno; then
   if test -z "$ssldir"; then
      AC_MSG_ERROR([SSL requested but no SSL headers found.])
   else
        AC_MSG_RESULT(yes)
        LIBS="$LIBS -lssl -lcrypto"
	if test "x$ssldir" != xdefault ; then
		CPPFLAGS="-I${ssldir}/include $CPPFLAGS"
	fi
	ac_cv_path_openssl=$ssldir
	AC_DEFINE(USE_SSL)
   fi
else
   AC_MSG_RESULT(no)
fi

dnl ##########################################################################
dnl Enable GSS?
dnl ##########################################################################

AC_ARG_WITH(gss, [  --with-gss            Enable GSS [default=no]],
    [with_gss=$withval],[with_gss=no])

AC_MSG_CHECKING([whether to build GSS support])
if test "x$with_gss" != xno  ; then
   if test -d $with_gss && test -f "$with_gss/include/gssapi/gssapi.h" ; then
      gssdir=$with_gss
   else
        AC_TRY_COMPILE([#include <gssapi/gssapi.h>], ,
			gssdir=default,
			gssdir="")
	if test "x$gssdir" = x ; then
           for dir in /usr /usr/local /usr/lib /usr/kerberos; do
               if test -f "$dir/include/gssapi/gssapi.h"; then
                  gssdir=$dir
               fi
           done
	fi
   fi
   if test -z "$gssdir"; then
      AC_MSG_ERROR([GSS requested but no GSS headers found ,$gssdir,.])
   else
      AC_MSG_RESULT($gsslib)
      AC_CHECK_LIB(gssapi, gss_init_sec_context, [
	  LIBS="$LIBS -L$gssdir/lib -lgssapi -lkrb5"
      ],[
	  LIBS="$LIBS -L$gssdir/lib -lgssapi_krb5"
      ], -lkrb5 -ldes -lasn1 -lroken -lcrypt -lcom_err -L$gssdir/lib)
      BALSA_CFLAGS="$BALSA_CFLAGS -I$gssdir/include"
   fi
else
   AC_MSG_RESULT(no)
   gssdir=no
fi
AM_CONDITIONAL(USE_GSS, test x$gssdir != xno)

dnl ###########################################################################
dnl Test whether jw is installed
dnl ###########################################################################
AC_PATH_PROG(JW,jw,no)
if test x$JW = xno; then
  HAVE_JW="no"
else
  HAVE_JW="yes"
fi
AM_CONDITIONAL(HAVE_JW, test "x$HAVE_JW" = "xyes")
AC_SUBST(HAVE_JW)

dnl ###########################################################################
dnl turn warnings into errors to enforce clean code
dnl ###########################################################################


AC_ARG_ENABLE(more-warnings,
[  --enable-more-warnings  Enable maximum compiler warnings [default=yes]],
set_more_warnings="$enableval", set_more_warnings=yes)

if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
	for option in -Wsign-promo -Wsign-compare -Wpointer-arith -Wnested-externs -Wchar-subscripts -Wuninitialized -Wmissing-prototypes -Wreturn-type; do
                SAVE_CFLAGS="$CFLAGS"
                CFLAGS="$CFLAGS $option"
                AC_MSG_CHECKING([whether gcc understands $option])
                AC_TRY_COMPILE([], [],
                        has_option=yes,
                        has_option=no,)
                if test $has_option = no; then
                  CFLAGS="$SAVE_CFLAGS"
                fi
                AC_MSG_RESULT($has_option)
                unset has_option
                unset SAVE_CFLAGS
        done
        unset option
fi

dnl ###########################################################################
dnl Check for CVS nature, for warnings + extra program checks
dnl have it at the end so configure tests do not die on warnings.
dnl ###########################################################################

if test -d "${srcdir}/CVS" ; then
	BALSA_FROM_CVS=yes
	BALSA_CFLAGS="$BALSA_CFLAGS -Werror -Wall"
else
	BALSA_FROM_CVS=no
fi

AC_MSG_CHECKING([for CVS information])
AC_MSG_RESULT($BALSA_FROM_CVS)

dnl ##########################################################################
dnl Create files.
dnl ##########################################################################

AC_OUTPUT([
Makefile
balsa.1
balsa.spec
po/Makefile.in
sounds/Makefile
images/Makefile
help/Makefile
help/C/Makefile
libbalsa/Makefile
libinit_balsa/Makefile
omf-install/Makefile
src/Makefile
])

dnl ##########################################################################
dnl Summary
dnl ##########################################################################

echo ""
echo "================ Final configuration ==================="
echo "    Installing into prefix: $prefix"
echo "      Using multithreading: $use_threads"
echo "   Enable compile warnings: $set_more_warnings"
echo "                Use ESMTP : $with_esmtp"
echo "               Use GtkHTML: $use_gtkhtml"
echo "                  Use LDAP: $use_ldap"
echo "                   Use GSS: $with_gss"
echo "                   Use SSL: $with_ssl"
dnl echo "                  Use SASL: $need_sasl"
echo ""

if test x"$BALSA_FROM_CVS" = xyes ; then
	echo "============================== NOTICE ================================"
	echo "                 You are using Balsa from CVS source."
	echo "  The program is likely to be unstable, contain incomplete features,"
	echo "or just plain not work. Use it at your own risk. You have been warned."
	echo "======================================================================"
	echo ""
fi

dnl ######################################################################################
dnl Startup
dnl ######################################################################################

AC_INIT(src/main.c)
AM_CONFIG_HEADER(config.h)

dnl ######################################################################################
dnl Versioning
dnl   BALSA_VERSION is what we use, except when we want...
dnl   BALSA_SHORT_VERSION, which doesn't have the release appended. For RPM, which
dnl                        keeps the release as a separate field
dnl ######################################################################################

BALSA_MAJOR=1
BALSA_REVISION=0
BALSA_PATCHLEVEL=pre2
BALSA_RELEASE=1
use_release=no

dnl BALSA_RELEASE must be specified (1 if nothing else), but
dnl change use_release depending on whether we want it to be
dnl appended to our official version. (no usually, yes for
dnl something like 'pre1' or 'beta4')

if test x"$use_release" = xno ; then
	brsffx=
else
	brsffx="-${BALSA_RELEASE}"
fi

BALSA_SHORT_VERSION="$BALSA_MAJOR.$BALSA_REVISION.${BALSA_PATCHLEVEL}"
BALSA_VERSION="$BALSA_MAJOR.$BALSA_REVISION.${BALSA_PATCHLEVEL}${brsffx}"
VERSION="$BALSA_VERSION"

dnl ######################################################################################
dnl Configure libmutt, later
dnl ######################################################################################

AC_CONFIG_SUBDIRS(libmutt)

dnl ######################################################################################
dnl Now that we have versioning, checks and stuff
dnl ######################################################################################

AM_INIT_AUTOMAKE(balsa, [$VERSION])

AM_MAINTAINER_MODE
AM_ACLOCAL_INCLUDE(macros)
AC_ISC_POSIX

AM_PATH_GLIB([1.2.0],[],[
	AC_MSG_ERROR([You need GLib installed -- GNOME requires this as well.])
],gthread)

GNOME_INIT

AC_PROG_CC
AC_STDC_HEADERS
AC_ARG_PROGRAM
AM_PROG_LEX
AC_PROG_YACC
AM_PROG_LIBTOOL

dnl this should come after `AC_PROG_CC'
GNOME_X_CHECKS

AC_CHECK_LIB(pspell, new_pspell_manager,,[
	AC_MSG_ERROR([*** libpspell not found.  Pleas check http://www.balsa.net for information on the required files.])
])

dnl Reset
LDFLAGS="$balsa_save_LDFLAGS"
LIBS="$balsa_save_LIBS"

dnl ######################################################################################
dnl Check for gnome-window-icon stuff.
dnl ######################################################################################
AC_CHECK_HEADERS(libgnomeui/gnome-window-icon.h)
AC_SUBST(HAVE_LIBGNOMEUI_GNOME_WINDOW_ICON_H)

dnl ######################################################################################
dnl Check for gnome-print
dnl ######################################################################################

AM_PATH_GNOME_PRINT([0.20.0], [
	AC_DEFINE(HAVE_GNOME_PRINT)
])


dnl ######################################################################################
dnl All the linguas, all the time.
dnl ######################################################################################

ALL_LINGUAS="ca da de en_GB el es es_ES et fi fr ga hu it ja ko lt nl no nn pl pt pt_BR ru sl sv tr uk wa zh_CN.GB2312"
LINGUAS="$ALL_LINGUAS"
AM_GNU_GETTEXT

dnl ######################################################################################
dnl Substitutions, defines, part I
dnl ######################################################################################

AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

dnl No choice about this
gnome_cv_use_gnome=yes

AC_DEFINE_UNQUOTED(BALSA_MAJOR, $BALSA_MAJOR)
AC_DEFINE_UNQUOTED(BALSA_REVISION, $BALSA_REVISION)
AC_DEFINE_UNQUOTED(BALSA_PATCHLEVEL, $BALSA_PATCHLEVEL)
AC_DEFINE_UNQUOTED(BALSA_VERSION, "$BALSA_VERSION")

dnl ######################################################################################
dnl More checks
dnl ######################################################################################

AC_CHECK_LIB(crypt, crypt)

dnl these may be used later.
dnl AC_CHECK_LIB(des, des_encrypt)
dnl AC_CHECK_LIB(krb, krb_sendauth)
dnl AC_CHECK_LIB(acap, acap_OpenConnection)

AM_HDR_SIGACTION
AM_HDR_SIGSET

dnl ######################################################################################
dnl ORBit support
dnl Use 'failure' instead of 'dontfail' to make us bomb if no orbit. Probably should
dnl   use 'failure'.
dnl ######################################################################################
dnl
dnl # No more IDL
dnl
dnl GNOME_ORBIT_HOOK([],dontfail)
dnl AM_CONDITIONAL(ORBIT_INSTALLED, test -n "$ORBIT_LIBS")

dnl ######################################################################################
dnl More substitutions
dnl ######################################################################################

AC_SUBST(BALSA_MAJOR)
AC_SUBST(BALSA_REVISION)
AC_SUBST(BALSA_PATCHLEVEL)
AC_SUBST(BALSA_RELEASE)
AC_SUBST(BALSA_SHORT_VERSION)
AC_SUBST(BALSA_VERSION)

AC_SUBST(LIBOBJS)
AC_SUBST(LIBESD_LIB)

dnl ######################################################################################
dnl Check for CVS nature, for warnings + extra program checks
dnl ######################################################################################

if test -d "${srcdir}/CVS" ; then
	BALSA_FROM_CVS=yes
else
	BALSA_FROM_CVS=no
fi

AC_MSG_CHECKING([for CVS information])
AC_MSG_RESULT($BALSA_FROM_CVS)

dnl ######################################################################################
dnl Enable all? (=broken stuff)
dnl ######################################################################################

AC_ARG_ENABLE(all, [  --enable-all            Enable incomplete features [default=no]],[
	use_all=$enableval
],[
	use_all=no
])

AC_MSG_CHECKING([whether to build unfinished features])
if test x"$use_all" = xyes ; then
	AC_MSG_RESULT([yes])
	AC_DEFINE(BALSA_SHOW_ALL)
else
	AC_MSG_RESULT([no])
fi

dnl ######################################################################################
dnl Use threading?
dnl ######################################################################################

AC_ARG_ENABLE(threads, [  --enable-threads        Use threading for mail retrieval [default=yes]],[
	use_threads=$enableval
],[
	use_threads=yes
])

AC_MSG_CHECKING([whether to use threads])
if test x"$use_threads" = xyes ; then
	AC_MSG_RESULT([yes])
	if test ! -z `$GLIB_CONFIG --help 2>&1 |grep 'gthread'` ; then
		THREAD_CFLAGS=`$GLIB_CONFIG --cflags gthread`
		THREAD_LIBS=`$GLIB_CONFIG --libs gthread`
		CFLAGS="$CFLAGS $THREAD_CFLAGS"
		LIBS="$LIBS $THREAD_LIBS"
		AC_DEFINE(BALSA_USE_THREADS,1)
	else
		AC_MSG_ERROR([Balsa requires GThread from GLib to use threading.])
	fi
else
	AC_MSG_RESULT([no])
fi


dnl #########################################################################
dnl  Check for LDAP if available.
dnl  For now, only look for OpenLDAP?
dnl ########################################################################

AC_ARG_ENABLE([ldap], [  --enable-ldap Use OpenLDAP if available (experimental) [default=no]],[
	use_ldap=$enableval
],[
	use_ldap=no
])
AC_MSG_CHECKING(whether to use LDAP)
if test x"$use_ldap" = xyes ; then
	AC_MSG_RESULT([yes])
	AC_CHECK_LIB(ldap, ldap_search, AC_DEFINE(ENABLE_LDAP) LIBS="-lldap -llber $LIBS", use_ldap=no, -llber)
else
	AC_MSG_RESULT([no])
fi


dnl ######################################################################################
dnl Check for GtkHTML if available
dnl ######################################################################################

AC_ARG_ENABLE([gtkhtml], [  --enable-gtkhtml Use GtkHTML if available (experimental) [default=no]],[
	check_gtkhtml=$enableval
],[
	check_gtkhtml=no
])

AC_MSG_CHECKING(whether to use GtkHTML)
if test x"$check_gtkhtml" = xyes ; then
	if gnome-config --libs gtkhtml > /dev/null 2>&1; then
        	vers=`gnome-config --modversion gtkhtml | sed 's/^gtkhtml-//'`
	        case $vers
        	in
                       0.[[0123]])
                               have_gtkhtml=no ;;
                       *) 
                               have_gtkhtml=yes ;;
        	esac
	else
        	have_gtkhtml=no
	fi

	if test x"$have_gtkhtml" = xyes ; then
	       	AC_MSG_RESULT(yes)
		GTKHTML_CFLAGS="`gnome-config --cflags gtkhtml`"
		GTKHTML_LIBS="`gnome-config --libs gtkhtml`"
		AC_DEFINE(HAVE_GTKHTML)
	else
	        AC_MSG_RESULT(not found)
	fi
else
	have_gtkhtml=no
	AC_MSG_RESULT(no)
fi

AC_SUBST(GTKHTML_CFLAGS)
AC_SUBST(GTKHTML_LIBS)

dnl ######################################################################################
dnl Install into gnome locations? (may require priveliges that we don't have)
dnl ######################################################################################

AC_ARG_ENABLE([system-install], [  --disable-system-install Don't install some files into Gnome's prefix],[
	use_system_install=$enableval
],[
	if test x"$BALSA_DISTCHECK_HACK" = xyes ; then
		use_system_install=no
	else
		use_system_install=yes
	fi
])

AC_MSG_CHECKING([whether to install into Gnome's prefix])
if test x"$use_system_install" = xyes ; then
	AC_MSG_RESULT([yes])
	gnomedatadir=`${GNOME_CONFIG} --datadir`
	gnomeconfdir=`${GNOME_CONFIG} --sysconfdir`
else
	AC_MSG_RESULT([no])
	gnomedatadir=\${datadir}
	gnomeconfdir=\${sysconfdir}
fi

AC_SUBST(gnomedatadir)
AC_SUBST(gnomeconfdir)

dnl ######################################################################################
dnl Remember our prefixes
dnl   The way prefix et al are defined makes us jump through some hoops.
dnl ######################################################################################

dnl datadir='${prefix}/share', so we must eval it or something. This works
BALSA_STD_PREFIX=`eval "echo ${prefix}"`
BALSA_DATA_PREFIX=`eval "echo ${datadir}"`
GNOME_STD_PREFIX=`${GNOME_CONFIG} --prefix`
GNOME_LIB_PREFIX=`${GNOME_CONFIG} --libdir`
GNOME_DATA_PREFIX=`${GNOME_CONFIG} --datadir`

dnl Consolidate them!
BALSA_COMMON_PREFIXES=`cat <<EOF |sort |uniq
"${BALSA_STD_PREFIX}",
"${BALSA_DATA_PREFIX}",
"${GNOME_STD_PREFIX}",
"${GNOME_DATA_PREFIX}",
"${GNOME_LIB_PREFIX}",
EOF
`

dnl Better way to do this?
AC_DEFINE_UNQUOTED( BALSA_STD_PREFIX, "$BALSA_STD_PREFIX" )
AC_DEFINE_UNQUOTED( BALSA_DATA_PREFIX, "$BALSA_DATA_PREFIX" )
AC_DEFINE_UNQUOTED( GNOME_STD_PREFIX, "$GNOME_STD_PREFIX" )
AC_DEFINE_UNQUOTED( GNOME_LIB_PREFIX, "$GNOME_LIB_PREFIX" )
AC_DEFINE_UNQUOTED( GNOME_DATA_PREFIX, "$GNOME_DATA_PREFIX" )
AC_DEFINE_UNQUOTED( BALSA_COMMON_PREFIXES, `echo $BALSA_COMMON_PREFIXES` ) dnl bleah

dnl ######################################################################################
dnl Things needed by CVS user
dnl ######################################################################################

if test x"$BALSA_FROM_CVS" = xyes ; then
	AC_CHECK_PROG(HAS_GOB, gob, yes, no)

	if test x"$HAS_GOB" = xno ; then
		AC_MSG_ERROR([As a CVS user, you need to get gob to build Balsa. It is available from Gnome CVS in the module 'gob'])
	fi
fi

dnl ######################################################################################
dnl Enable GSS?
dnl ######################################################################################

AC_ARG_WITH(gss, [  --with-gss            Enable GSS [default=no]],[
	with_gss=$withval
],[
	with_gss=no
])

AC_MSG_CHECKING([whether to build GSS support])
if test "x$with_gss" != xno  ; then
	AC_MSG_RESULT([yes])
	CFLAGS="$CFLAGS -I$with_gss/include"
	LIBS="$LIBS -L$with_gss/lib -lgssapi_krb5"
else
	AC_MSG_RESULT([no])
fi


dnl #############################################################
dnl turn warnings into errors to enforce clean code
dnl #############################################################

AC_ARG_ENABLE(more-warnings,
[  --enable-more-warnings  Enable maximum compiler warnings [default=yes]],
set_more_warnings="$enableval", set_more_warnings=yes)

if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
        CFLAGS="$CFLAGS \
        -Wall -Wno-uninitialized \
        -Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes \
        -Wnested-externs -Wpointer-arith \
        -Wno-sign-compare -Wsign-promo \
        -Werror"
fi

dnl ######################################################################################
dnl Create files.
dnl ######################################################################################

AC_OUTPUT([
Makefile
balsa.1
balsa.spec
po/Makefile.in
macros/Makefile
intl/Makefile
sounds/Makefile
images/Makefile
help/Makefile
help/C/Makefile
libbalsa/Makefile
libinit_balsa/Makefile
src/Makefile
])

dnl ######################################################################################
dnl Summary
dnl ######################################################################################

echo ""
echo "================ Final configuration ==================="
echo "    Installing into prefix: $prefix"
echo "      Using multithreading: $use_threads"
echo " Using incomplete features: $use_all"
echo "Installing some files into  "
echo "            Gnome's prefix: $use_system_install (may require root privileges)"
echo "   Enable compile warnings: $set_more_warnings"
echo "               Use GtkHTML: $have_gtkhtml"
echo "                  Use LDAP: $use_ldap"
echo ""

if test x"$BALSA_FROM_CVS" = xyes ; then
	echo "============================== NOTICE ================================"
	echo "                 You are using Balsa from CVS source."
	echo "  The program is likely to be unstable, contain incomplete features,"
	echo "or just plain not work. Use it at your own risk. You have been warned."
	echo "======================================================================"
	echo ""
fi

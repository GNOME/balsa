%h{
/*
 * Balsa E-Mail Client
 * Copyright (C) 1997-1999 Jay Painter and Stuart Parmenter
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option) 
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
 * 02111-1307, USA.
 */

#include "config.h"
#include <gnome.h>
#include "helper.h"
#include "balsa-initdruid.h"
#include "balsa-druid-page.h"
%}

%{
#include "balsa-app.h"

#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <unistd.h>

%}

class Balsa:Druid:Page:Directory from Balsa:Druid:Page {
	private GtkWidget *inbox;
	private GtkWidget *outbox;
	private GtkWidget *sentbox;
	private GtkWidget *draftbox;
	private GtkWidget *trash;

	/*No arrays in gob :-(*/
	private EntryMaster emaster;
	private EntryData ed0;
	private EntryData ed1;
	private EntryData ed2;
	private EntryData ed3;
	private EntryData ed4;

	public GtkObject *new( Balsa:InitDruid *druid (check type null ) ) 
	{ 
		GtkObject *self = GTK_OBJECT( GET_NEW );
		(BALSA_DRUID_PAGE( self ))->druid = GNOME_DRUID( druid );
		balsa_druid_page_directory_construct( BALSA_DRUID_PAGE( self ) );
		return self;
	}

	init( self ) 
	{
		GtkTable *table;
		GtkLabel *label;
		gchar *preset;

		self->emaster.setbits = 0;
		self->emaster.numentries = 0;
		self->emaster.donemask = 0;

		self->ed0.master = &( self->emaster );
		self->ed1.master = &( self->emaster );
		self->ed2.master = &( self->emaster );
		self->ed3.master = &( self->emaster );
		self->ed4.master = &( self->emaster );

		table = GTK_TABLE( gtk_table_new( 6, 2, FALSE ) );
	
		label = GTK_LABEL( gtk_label_new( _(
			"Please confirm the locations of your default mail files.\n"
			"These will be created if necessary." ) ) );
		gtk_label_set_justify( label, GTK_JUSTIFY_RIGHT );
		gtk_label_set_line_wrap( label, TRUE );
		gtk_table_attach( table, GTK_WIDGET( label ), 0, 2, 0, 1,
			GTK_EXPAND | GTK_FILL, GTK_EXPAND | GTK_FILL,
			8, 4 );

		preset = getenv( "MAIL" );
		if( preset )
			preset = g_strdup( preset );
		balsa_init_add_table_entry( table, 0, _("Inbox:"), preset, &( self->ed0 ), GTK_WIDGET( self ), &( self->inbox ) );
		if( preset )
			g_free( preset );

		preset = g_strconcat( balsa_app.local_mail_directory, "/outbox", NULL );
		balsa_init_add_table_entry( table, 1, _("Outbox:"), preset, &( self->ed1 ), GTK_WIDGET( self ), &( self->outbox ) );
		g_free( preset );

		preset = g_strconcat( balsa_app.local_mail_directory, "/sentbox", NULL );
		balsa_init_add_table_entry( table, 2, _("Sentbox:"), preset, &( self->ed2 ), GTK_WIDGET( self ), &( self->sentbox ) );
		g_free( preset );

		preset = g_strconcat( balsa_app.local_mail_directory, "/draftbox", NULL );
		balsa_init_add_table_entry( table, 3, _("Draftbox:"), preset, &( self->ed3 ), GTK_WIDGET( self ), &( self->draftbox ) );
		g_free( preset );

		preset = g_strconcat( balsa_app.local_mail_directory, "/trash", NULL );
		balsa_init_add_table_entry( table, 4, _("Trash:"), preset, &( self->ed4 ), GTK_WIDGET( self ), &( self->trash ) );
		g_free( preset );

		gtk_box_pack_start( GTK_BOX( (GNOME_DRUID_PAGE_STANDARD( self ))->vbox ),
			GTK_WIDGET( table ), TRUE, TRUE, 8 );
		gtk_widget_show_all( GTK_WIDGET( table ) );
	}

	override (Balsa:Druid:Page) void
	construct( Balsa:Druid:Page *self ) 
	{
		(GNOME_DRUID_PAGE_STANDARD( self ))->title = g_strdup( _("Mail Files" ) );

		g_return_if_fail( (BALSA_DRUID_PAGE( self ))->druid != NULL );
		(GNOME_DRUID_PAGE_STANDARD( self ))->logo_image = (BALSA_INITDRUID( (BALSA_DRUID_PAGE( self ))->druid ))->default_logo;

		PARENT_HANDLER( self );
	}

	override (Gnome:Druid:Page) void
	prepare( Gnome:Druid:Page *_self, Gtk:Widget *druid (check type null) ) 
	{
		BalsaDruidPageDirectory *self = BALSA_DRUID_PAGE_DIRECTORY( _self );

		/* Don't let them continue unless all entries have something. */

		if( ENTRY_MASTER_DONE( self->emaster ) ) {
			gnome_druid_set_buttons_sensitive( GNOME_DRUID( druid ), TRUE, TRUE, TRUE );
		} else {
			gnome_druid_set_buttons_sensitive( GNOME_DRUID( druid ), TRUE, FALSE, TRUE );
		}

		gnome_druid_set_show_finish( GNOME_DRUID( druid ), FALSE );
	}

	override (Gnome:Druid:Page) gboolean
	next( Gnome:Druid:Page *_self, Gtk:Widget *druid (check type null) ) 
	{
		BalsaDruidPageDirectory *self = BALSA_DRUID_PAGE_DIRECTORY( _self );	

		PARENT_HANDLER( _self, druid );
		return TRUE;
	}
}
%h{
/*
 * Balsa E-Mail Client
 * Copyright (C) 1997-1999 Jay Painter and Stuart Parmenter
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option) 
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
 * 02111-1307, USA.
 */

#include "config.h"
#include <gnome.h>
#include "helper.h"
#include "balsa-initdruid.h"
#include "balsa-druid-page.h"
%}

class Balsa:Druid:Page:Error from Balsa:Druid:Page {
	private GnomeDruidPage *real_next;

	public GtkObject *new_after( Balsa:Druid:Page *prev (check null type), gchar *title ) {
		BalsaDruidPageError *self = BALSA_DRUID_PAGE_ERROR( GET_NEW );

		self->real_next = prev->next;
		prev->next = GNOME_DRUID_PAGE( self );
		(BALSA_DRUID_PAGE( self ))->prev = GNOME_DRUID_PAGE( prev );
		(BALSA_DRUID_PAGE( self ))->next = NULL;
		(BALSA_DRUID_PAGE( self ))->druid = (BALSA_DRUID_PAGE( prev ))->druid;
	
		balsa_druid_page_error_construct( BALSA_DRUID_PAGE( self ) );
		gnome_druid_page_standard_set_title( GNOME_DRUID_PAGE_STANDARD( self ), title );
		gnome_druid_page_standard_set_logo( GNOME_DRUID_PAGE_STANDARD( self ), 
			(BALSA_INITDRUID( (BALSA_DRUID_PAGE( self ))->druid ))->default_logo );
		gnome_druid_append_page( GNOME_DRUID( prev->druid ), GNOME_DRUID_PAGE( self ) );
		return GTK_OBJECT( self );
	}

	public void
	goto_me( self ) {
		BalsaInitDruid *druid = BALSA_INITDRUID( (BALSA_DRUID_PAGE( self ))->druid );

		(BALSA_DRUID_PAGE( (BALSA_DRUID_PAGE( self ))->prev ))->next = GNOME_DRUID_PAGE( self );
		gnome_druid_set_page( GNOME_DRUID( druid ), GNOME_DRUID_PAGE( self ) );
	}

	init( self ) {
		GdkColor alarm;

		alarm.red = 40000; alarm.blue = 0; alarm.green = 0;		
		gnome_druid_page_standard_set_bg_color( GNOME_DRUID_PAGE_STANDARD( self ), &alarm );
	}

	override (Balsa:Druid:Page) void
	construct( Balsa:Druid:Page *self ) {
		PARENT_HANDLER( self );
		gtk_widget_show_all( GTK_WIDGET( self ) );
	}

	override (Gnome:Druid:Page) void
	prepare( Gnome:Druid:Page *_self, Gtk:Widget *druid (check type null) ) {
		/*BalsaDruidPageFinish *self = BALSA_DRUID_PAGE_FINISH( _self );*/

		/*gnome_druid_page_standard_set_logo( GNOME_DRUID_PAGE_STANDARD( self ), (BALSA_INITDRUID( druid ))->default_logo );*/
		gnome_druid_set_buttons_sensitive( GNOME_DRUID( druid ), TRUE, FALSE, TRUE );
		gnome_druid_set_show_finish( GNOME_DRUID( druid ), FALSE );
		PARENT_HANDLER( _self, druid );
	}

	override (Gnome:Druid:Page) gboolean
	back( Gnome:Druid:Page *_self, Gtk:Widget *druid (check type null) ) {
		BalsaDruidPage *self = BALSA_DRUID_PAGE( _self );

		g_return_val_if_fail( self->prev != NULL, TRUE );

		(BALSA_DRUID_PAGE( self->prev ))->next = (BALSA_DRUID_PAGE_ERROR( self ))->real_next;
		gnome_druid_set_page( GNOME_DRUID( (BALSA_DRUID_PAGE( self ))->druid ), GNOME_DRUID_PAGE( self->prev ) );
		gtk_object_destroy( GTK_OBJECT( self ) );
		return TRUE;
	}
}



%h{
/*
 * Balsa E-Mail Client
 * Copyright (C) 1997-1999 Jay Painter and Stuart Parmenter
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option) 
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
 * 02111-1307, USA.
 */

#include "config.h"
#include <gnome.h>
#include "helper.h"
#include "balsa-initdruid.h"
#include "balsa-druid-page.h"

typedef struct EntryData_s EntryData;
struct EntryData_s {
	GtkWidget *page;
	guint num;
};
%}

%{
#include "balsa-druid-page-error.h"

#define ENTRIES 4
	
/* Warning: these functions are all very interdependent. Make sure to keep assumptions
 * consistent when modifying.
 */
static void entrylabel( GtkTable *table, guint num, gchar *ltext, gchar *etext, EntryData *ed, GtkWidget *page );
static void entry_changed_cb( GtkEntry *entry );

static void entrylabel( GtkTable *table, guint num, gchar *ltext, gchar *etext, EntryData *ed, GtkWidget *page )
{
	GtkWidget *w;

	ed->num = num;
	ed->page = page;

	w = gtk_label_new( ltext );
	gtk_label_set_justify( GTK_LABEL( w ), GTK_JUSTIFY_RIGHT );
	gtk_table_attach( table, GTK_WIDGET( w ), 0, 1, num + 1, num + 2,
		GTK_EXPAND | GTK_FILL, GTK_EXPAND | GTK_FILL,
		8, 4 );

	w = gtk_entry_new();
	gtk_object_set_user_data( GTK_OBJECT( w ), ed );
	gtk_entry_set_text( GTK_ENTRY( w ), etext );
	gtk_signal_connect( GTK_OBJECT( w ), "changed", entry_changed_cb, NULL );
	gtk_table_attach( table, GTK_WIDGET( w ), 1, 2, num + 1, num + 2,
		GTK_EXPAND | GTK_FILL, GTK_EXPAND | GTK_FILL,
		8, 4 );
}

static void entry_changed_cb( GtkEntry *entry )
{
	EntryData *ed = gtk_object_get_user_data( GTK_OBJECT( entry ) );
	BalsaDruidPageUser *up;
	guint32 donemask;

	g_assert( ed != NULL );

	up = BALSA_DRUID_PAGE_USER( ed->page );
	if( entry->text_length ) {
		up->setbits |= (1 << ed->num);
	} else {
		up->setbits &= ~(1 << ed->num);
	}

	/* The stuff below is only when we are displayed... which is not
	 * always the case.
	 */
	if( !GTK_WIDGET_VISIBLE( GTK_WIDGET( entry ) ) )
		return;

	/* numentries = say, 3;
	 * 1 << 3 = 01000b
	 * 01000b - 1 = 0111b
	 */
	donemask = ( (1 << up->numentries) - 1 );

	/* Don't let them continue unless all entries have something. */
	if( (up->setbits & donemask) == donemask ) {
		gnome_druid_set_buttons_sensitive( GNOME_DRUID( (BALSA_DRUID_PAGE( up ))->druid ), TRUE, TRUE, TRUE );
	} else {
		gnome_druid_set_buttons_sensitive( GNOME_DRUID( (BALSA_DRUID_PAGE( up ))->druid ), TRUE, FALSE, TRUE );
	}
}

%}

class Balsa:Druid:Page:User from Balsa:Druid:Page {
	private guint32 setbits;
	private guint32 numentries;
	/* Gob can't handle arrays. Sigh. */
	private EntryData ed0;
	private EntryData ed1;
	private EntryData ed2;
	private EntryData ed3;

	public GtkObject *new( Balsa:InitDruid *druid (check type null ) ) 
	{ 
		GtkObject *self = GTK_OBJECT( GET_NEW );
		(BALSA_DRUID_PAGE( self ))->druid = GNOME_DRUID( druid );
		balsa_druid_page_user_construct( BALSA_DRUID_PAGE( self ) );
		return self;
	}

	init( self ) {
		GtkTable *table;
		GtkLabel *label;
		gchar *preset;
		char hostbuf[512];

		self->numentries = ENTRIES;
		self->setbits = 0xFF;

		table = GTK_TABLE( gtk_table_new( 5, 2, FALSE ) );

		label = GTK_LABEL( gtk_label_new( _("Please enter information about yourself.") ) );
		gtk_label_set_justify( label, GTK_JUSTIFY_CENTER );
		gtk_label_set_line_wrap( label, TRUE );
		gtk_table_attach( table, GTK_WIDGET( label ), 0, 2, 0, 1,
			GTK_EXPAND | GTK_FILL, GTK_EXPAND | GTK_FILL, 
			8, 4 );

		preset = g_get_real_name();
		entrylabel( table, 0, _("Name:"), preset, &( self->ed0 ), GTK_WIDGET( self ) );
		
		gethostname( hostbuf, 511 );
		preset = g_strconcat( g_get_user_name(), "@", hostbuf, NULL );
		entrylabel( table, 1, _("Email address:"), preset, &( self->ed1 ), GTK_WIDGET( self ) );
		g_free( preset );

		preset = "localhost";
		entrylabel( table, 2, _("SMTP Server:"), preset, &( self->ed2 ), GTK_WIDGET( self ) );

		preset = g_strconcat( g_get_home_dir(), "/balsa", NULL );
		entrylabel( table, 3, _("Local Mail Directory:"), preset, &( self->ed3 ), GTK_WIDGET( self ) );
		g_free( preset );

		gtk_box_pack_start( GTK_BOX( (GNOME_DRUID_PAGE_STANDARD( self ))->vbox ),
			GTK_WIDGET( table ), TRUE, TRUE, 8 );
		gtk_widget_show_all( GTK_WIDGET( table ) );
	}

	override (Balsa:Druid:Page) void
	construct( Balsa:Druid:Page *self ) {
		(GNOME_DRUID_PAGE_STANDARD( self ))->title = g_strdup( _("User Settings" ) );

		g_return_if_fail( (BALSA_DRUID_PAGE( self ))->druid != NULL );
		(GNOME_DRUID_PAGE_STANDARD( self ))->logo_image = (BALSA_INITDRUID( (BALSA_DRUID_PAGE( self ))->druid ))->default_logo;

		PARENT_HANDLER( self );
	}

	override (Gnome:Druid:Page) void
	prepare( Gnome:Druid:Page *_self, Gtk:Widget *druid (check type null) ) {
		guint32 donemask;
		BalsaDruidPageUser *self = BALSA_DRUID_PAGE_USER( _self );

		/* Don't let them continue unless all entries have something. */
		/* FIXME: unify this with code above */
		donemask = ( (1 << self->numentries) - 1 );

		if( (self->setbits & donemask) == donemask ) {
			gnome_druid_set_buttons_sensitive( GNOME_DRUID( druid ), TRUE, TRUE, TRUE );
		} else {
			gnome_druid_set_buttons_sensitive( GNOME_DRUID( druid ), TRUE, FALSE, TRUE );
		}

		gnome_druid_set_show_finish( GNOME_DRUID( druid ), FALSE );
	}

	override (Gnome:Druid:Page) gboolean
	next( Gnome:Druid:Page *_self, Gtk:Widget *druid (check type null) ) {
		static gboolean tested_it = FALSE;

		if( !tested_it ) {
			GtkObject *next;

			next = balsa_druid_page_error_new_after( BALSA_DRUID_PAGE( _self ), "Aieee!!!" );
			gtk_box_pack_start( GTK_BOX( (GNOME_DRUID_PAGE_STANDARD( next ))->vbox ),
				GTK_WIDGET( gtk_label_new( "Test" ) ), TRUE, TRUE, 8 );
			gtk_widget_show_all( GTK_WIDGET( (GNOME_DRUID_PAGE_STANDARD( next ))->vbox ) );
			balsa_druid_page_error_goto_me( next );
			tested_it = TRUE;
		} else {
			PARENT_HANDLER( _self, druid );
		}

		return TRUE;
	}
}
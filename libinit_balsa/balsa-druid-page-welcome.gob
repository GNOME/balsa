%h{
/*
 * Balsa E-Mail Client
 * Copyright (C) 1997-1999 Jay Painter and Stuart Parmenter
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option) 
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
 * 02111-1307, USA.
 */

#include "config.h"
#include <gnome.h>
#include "helper.h"
#include "balsa-initdruid.h"
#include "balsa-druid-page.h"
%}

/* We do not inherit from BalsaDruidPage because the start
   page has all the stuff with the canvas. */
class Balsa:Druid:Page:Welcome from Gnome:Druid:Page:Start {
	private Balsa:InitDruid *druid;
	public GnomeDruidPage *next;

	public Gtk:Object *new( Balsa:InitDruid *druid (check null type) ) { 
		GtkObject *self = GTK_OBJECT( GET_NEW );

		(BALSA_DRUID_PAGE_WELCOME( self ))->_priv->druid = druid;
		gnome_druid_page_start_set_logo( GNOME_DRUID_PAGE_START( self ), druid->default_logo );
		gnome_druid_page_start_set_watermark( GNOME_DRUID_PAGE_START( self ), balsa_init_get_png( "balsa-watermark.png" ) );

		return self;
	}
	
	init( self ) {
		(GNOME_DRUID_PAGE_START( self ))->title = 
			g_strdup( _("Welcome to Balsa!") );
		(GNOME_DRUID_PAGE_START( self ))->text =
			g_strdup( _(
	 		"You seem to be running Balsa for the first time. The following\n"
			"steps will set up Balsa by asking a few simple questions. Once\n"
			"you have completed these steps, you can always change them later\n"
			"in Balsa's preferences. If any files or directories need to be created,\n"
			"it will be done so automatically. Please check the about box in Balsa's\n"
			"main window for more information about contacting the authors or\n"
			"reporting bugs."
			) );

		balsa_druid_page_welcome_construct( self );
	}
	
	virtual void
	construct( self ) {
		GnomeDruidPageStart *druid_page_start = GNOME_DRUID_PAGE_START( self );

		/*FIXME: copied out of gnome-druid-page-start.c.... */
		druid_page_start->background_item =
			gnome_canvas_item_new (gnome_canvas_root (GNOME_CANVAS (druid_page_start->canvas)),
			gnome_canvas_rect_get_type (), NULL);

		druid_page_start->textbox_item =
			gnome_canvas_item_new (gnome_canvas_root (GNOME_CANVAS (druid_page_start->canvas)),
			gnome_canvas_rect_get_type (), NULL);

		druid_page_start->logoframe_item =
			gnome_canvas_item_new (gnome_canvas_root (GNOME_CANVAS (druid_page_start->canvas)),
			gnome_canvas_rect_get_type (), NULL);

		druid_page_start->logo_item =
			gnome_canvas_item_new (gnome_canvas_root (GNOME_CANVAS (druid_page_start->canvas)),
			gnome_canvas_image_get_type (),
			"image", druid_page_start->logo_image, NULL);

		if (druid_page_start->logo_image != NULL)
			gnome_canvas_item_set (druid_page_start->logo_item,
				"image", druid_page_start->logo_image, NULL);

		druid_page_start->watermark_item =
			gnome_canvas_item_new (gnome_canvas_root (GNOME_CANVAS (druid_page_start->canvas)),
				 gnome_canvas_image_get_type (),
				 "image", druid_page_start->watermark_image, NULL);

		druid_page_start->title_item =
			gnome_canvas_item_new (gnome_canvas_root (GNOME_CANVAS (druid_page_start->canvas)),
				gnome_canvas_text_get_type (),
				"text", druid_page_start->title,
				"font", "-adobe-helvetica-bold-r-normal-*-*-180-*-*-p-*-iso8859-1",
				NULL);

		druid_page_start->text_item =
			gnome_canvas_item_new (gnome_canvas_root (GNOME_CANVAS (druid_page_start->canvas)),
				gnome_canvas_text_get_type (),
				"text", druid_page_start->text,
				"justification", GTK_JUSTIFY_LEFT,
				"font", "-adobe-helvetica-medium-r-normal-*-*-120-*-*-p-*-iso8859-1",
				NULL );
	}

	/*The weird selves are to remove pointer compatibilty warnings. Sigh*/
	override (Gnome:Druid:Page) void
	prepare( Gnome:Druid:Page *_self, Gtk:Widget *druid (check null type) ) {		
		/*BalsaDruidPageWelcome *self = BALSA_DRUID_PAGE_WELCOME( _self );*/

		gnome_druid_set_buttons_sensitive( GNOME_DRUID( druid ), FALSE, TRUE, TRUE );
		gnome_druid_set_show_finish( GNOME_DRUID( druid ), FALSE );
	}

	override (Gnome:Druid:Page) gboolean 
	next( Gnome:Druid:Page *_self, Gtk:Widget *druid (check null type) ) {
		BalsaDruidPageWelcome *self = BALSA_DRUID_PAGE_WELCOME( _self );

		g_return_val_if_fail( self->next != NULL, FALSE );

		if( BALSA_IS_DRUID_PAGE( self->next ) ) {
			(BALSA_DRUID_PAGE( self->next ))->prev = GNOME_DRUID_PAGE( self );
		}

		gnome_druid_set_page( GNOME_DRUID( druid ), GNOME_DRUID_PAGE( self->next ) );
		return TRUE;
	}

	override (Gnome:Druid:Page) gboolean 
	back( Gnome:Druid:Page *_self, Gtk:Widget *druid (check null type) ) {
		g_warning( "Trying to go back from start page... prev button should "
			   "be disabled!" );
		return TRUE;
	}
}
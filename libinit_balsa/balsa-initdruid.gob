%h{
/*
 * Balsa E-Mail Client
 * Copyright (C) 1997-1999 Jay Painter and Stuart Parmenter
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option) 
 * any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  
 * 02111-1307, USA.
 */

#include "config.h"
#include <gnome.h>
#include "helper.h"
%}

%{
#include "save-restore.h" 

#include "balsa-druid-page.h"
#include "balsa-druid-page-welcome.h"
#include "balsa-druid-page-user.h"
#include "balsa-druid-page-directory.h"
#include "balsa-druid-page-finish.h"

static void really_cb( gint reply, BalsaInitDruid *druid );

static void really_cb( gint reply, BalsaInitDruid *druid )
{
    if( reply == GNOME_YES ) {
	gnome_config_drop_all();
	/* balsa_initdruid_finished( druid ); */
	gtk_exit( 0 );
    }
}

%}

class Balsa:InitDruid from Gnome:Druid {
	private Gtk:Widget *welcome;
	private Gtk:Widget *user;
	private Gtk:Widget *std_boxes;
	private Gtk:Widget *finish;
	private Gtk:Widget *window;

	public GdkImlibImage *default_logo;

	public Gtk:Object *new( Gtk:Window *window (check type null) ) { 
		GtkObject *self = GTK_OBJECT( GET_NEW );

		BALSA_INITDRUID(self)->_priv->window = GTK_WIDGET(window);
		gtk_object_ref( GTK_OBJECT( window ) );
		gtk_container_add( GTK_CONTAINER(BALSA_INITDRUID(self)->_priv->window), GTK_WIDGET(self));

		return self;
	 }

	init( self ) {
		self->default_logo = balsa_init_get_png( "balsa-logo.png" );
		self->_priv->welcome = GTK_WIDGET( balsa_druid_page_welcome_new( self ) );
		gnome_druid_append_page( GNOME_DRUID( self ), GNOME_DRUID_PAGE( self->_priv->welcome ) );
	        gnome_druid_set_page( GNOME_DRUID( self ), GNOME_DRUID_PAGE( self->_priv->welcome ) );

		self->_priv->user = GTK_WIDGET( balsa_druid_page_user_new( self ) );
		gnome_druid_append_page( GNOME_DRUID( self ), GNOME_DRUID_PAGE( self->_priv->user ) );

		self->_priv->std_boxes = GTK_WIDGET( balsa_druid_page_directory_new( self ) );
		gnome_druid_append_page( GNOME_DRUID( self ), GNOME_DRUID_PAGE( self->_priv->std_boxes ) );

		self->_priv->finish = GTK_WIDGET( balsa_druid_page_finish_new() );
		gnome_druid_append_page( GNOME_DRUID( self ), GNOME_DRUID_PAGE( self->_priv->finish ) );

		(BALSA_DRUID_PAGE_WELCOME( self->_priv->welcome ))->next = GNOME_DRUID_PAGE( self->_priv->user );
		(BALSA_DRUID_PAGE( self->_priv->user ))->next = GNOME_DRUID_PAGE( self->_priv->std_boxes );
		(BALSA_DRUID_PAGE( self->_priv->std_boxes ))->next = GNOME_DRUID_PAGE( self->_priv->finish );

		(BALSA_DRUID_PAGE( self->_priv->finish ))->prev = GNOME_DRUID_PAGE( self->_priv->std_boxes );
		(BALSA_DRUID_PAGE( self->_priv->std_boxes ))->prev = GNOME_DRUID_PAGE( self->_priv->user );
		(BALSA_DRUID_PAGE( self->_priv->user ))->prev = GNOME_DRUID_PAGE( self->_priv->welcome );
	}

	override (Gnome:Druid) void 
	cancel( Gnome:Druid *_self ) {
		GtkWidget *dialog;

		dialog = gnome_question_dialog_modal( _("This will exit Balsa. Do you\n"
				        "really want to do this?"), 
				 	(GnomeReplyCallback) really_cb, _self );
		gnome_dialog_run_and_close(GNOME_DIALOG(dialog));
	}

	public void finished( self ) {
		GtkObject *win;

		win = GTK_OBJECT( self->_priv->window );

		gtk_object_destroy( GTK_OBJECT( self->_priv->welcome ) );
		gtk_object_destroy( GTK_OBJECT( self->_priv->user ) );
		gtk_object_destroy( GTK_OBJECT( self->_priv->std_boxes ) );
		gtk_object_destroy( GTK_OBJECT( self->_priv->finish ) );
		gtk_object_destroy( GTK_OBJECT( self ) );
		/*gtk_object_unref( win );*/
		gtk_object_destroy( win );

		gtk_main_quit();
	}
}




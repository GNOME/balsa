<html>
<head>
<title>Balsa -- Bugs</title>
<link rel="stylesheet" type="text/css" href="@website_root@/style.css">
</head>
<body background="@website_root@/images/bg.jpg" bgcolor="#ffffff" text="#000000" link="#993300" vlink="#993300">
<table width="100%">
	<tr>
		<td width="80"></td>
		<td>
			<dd align="left"><img src="@website_root@/images/balsa.jpg" alt="balsa" align="middle" width="476" height="122">
			<big><big><b>Reporting Bugs</b></big></big><br></dd>

			<p>To report Balsa's bugs, please first check <a href="http://bugs.gnome.org/db/pa/lbalsa.html">the Balsa
			bug tracker</a> to see if your bug has already been reported. You can probably see that we currently have
			tons of duplicate bugs, so <b>please</b> do this for us. If your bug has already been reported, read the
			report and see if you can help by providing any more information. You can do this by sending an email to
			&lt;bug-number&gt;@bugs.gnome.org .</p>

			<p>If you decide to write a new bug report, please collect some information before submitting it. We need
			to know:</p>

			<ul>
			<li>Your system information: processor, version of Linux, locale, etc. Bug-buddy, gnome-bug, and the like can
				probably autodetect this information.</li>
			<li>How Balsa was set up: How was configure run? Is it an RPM or a source tarball?</li>
			<li>What causes the bug. <b>Please please please</b> try to find a reliable way to reproduce your bug.
				It can be difficult to do this, but a bug that can be reporoduced can usually be solved very
				quickly.</li>
			</ul>

			<p>Your bug report can be submitted via the gnome-bug script, which comes with gnome-core, or 
			<a href="http://www.andrew.cmu.edu/~jberkman/bug-buddy/">bug-buddy</a>, which automates the process
			of generating stack traces described below. In general, you will have to fill in some blanks, and write
			some text about the bug. Whatever data you can get your hands on, paste into there.</p>

			<p>If you're feeling adventurous, you can try using gdb to get a stack trace. The only thing better than
			a reproducible bug is a stack trace. We have some quick instructions for you to follow if you're not
			familiar with using gdb. First, you use gdb to run balsa. We give it the option --disable-crash-dialog
			so that the program stops where the crash occurred, instead of going on into Gnome's crash handler:</p>

			<blockquote>
			$ gdb /path/to/balsa<br>
			GNU gdb 4.18
			Copyright 1998 Free Software Foundation, Inc.<br>
			GDB is free software, covered by the GNU General Public License, and you are<br>
			welcome to change it and/or distribute copies of it under certain conditions.<br>
			Type &quot;show copying&quot; to see the conditions.<br>
			There is absolutely no warranty for GDB.  Type &quot;show warranty&quot; for details.<br>
			This GDB was configured as "i386-redhat-linux"...<br>
			(gdb) <b>run --disable-crash-dialog</b><br>
			</blockquote>

			<p>At this point Balsa should run. Do whatever you need to do to make it crash. Have no mercy. You'll
			get something like the following. The first order of business is to get a backtrace, with the 
			&quot;bt&quot; command.</p>

			<blockquote>
			Program received signal SIGSEGV, Segmentation fault.<br>
			0x4008b9ab in poptGetInvocationName (con=0x80bb070) at popt.c:748<br>
			748         return con->os->argv[0];<br>
			(gdb) <b>bt</b><br>
			#0  0x4008b9ab in poptGetInvocationName (con=0x80bb070) at popt.c:748<br>
			#1  0x4010ba63 in gnome_add_gtk_arg_callback (con=0x80bb070, reason=POPT_CALLBACK_REASON_PRE, opt=0x0, arg=0x0, data=0x0)<br>
			    at gnome-init.c:113<br>
			#2  0x4008a171 in invokeCallbacks (con=0x80bb070, table=0x401658e8, post=0) at popt.c:39<br>
			#3  0x4008a13c in invokeCallbacks (con=0x80bb070, table=0x80b07b8, post=0) at popt.c:34<br>
			#4  0x4008a2ef in poptGetContext (name=0x809e3b5 &quot;balsa&quot;, argc=2, argv=0x0, options=0x80b07b8, flags=0) at popt.c:78<br>
			#5  0x403f0ba6 in gnomelib_parse_args (argc=2, argv=0x0, popt_flags=0) at gnome-popt.c:80<br>
			#6  0x4010bdef in gnome_init_with_popt_table (app_id=0x809e3b5 &quot;balsa&quot;, app_version=0x809e3af &quot;0.7.9&quot;, argc=2, argv=0x0, <br>
			    options=0x80a75b8, flags=0, return_ctx=0x0) at gnome-init.c:451<br>
			#7  0x4002d36f in gnome_CORBA_init_with_popt_table (app_id=0x809e3b5 &quot;balsa&quot;, app_version=0x809e3af &quot;0.7.9&quot;, argc=0xbffffc48, argv=0x0, <br>
			    options=0x80a75b8, popt_flags=0, return_ctx=0x0, gnorba_flags=GNORBA_INIT_SERVER_FUNC, ev=0xbffffc30) at orbitgnome.c:98<br>
			#8  0x806a3ad in balsa_init (argc=2, argv=0x0) at main.c:111<br>
			#9  0x806a5f8 in main (argc=2, argv=0xbffffcb4) at main.c:234<br>
			</blockquote>

			<p>Save this output. This is the all-important stacktrace. There's a little more information to
			be gleaned though. Try repeating these commands three or four times:</p>

			<blockquote>
			(gdb) <b>list</b><br>
			743     <br>
			744         return 0;<br>
			745     }<br>
			746     <br>
			747     const char * poptGetInvocationName(poptContext con) {<br>
			748         return con->os->argv[0];<br>
			749     }<br>
			750     <br>
			751     int poptStrippedArgv(poptContext con, int argc, char **argv)<br>
			752     {<br>
			(gdb) <b>info locals</b><br>
			con = 0x0<br>
			(gdb) <b>up</b><br>
			#1  0x4010ba63 in gnome_add_gtk_arg_callback (con=0x80bb070, reason=POPT_CALLBACK_REASON_PRE, opt=0x0, arg=0x0, data=0x0)<br>
			    at gnome-init.c:113<br>
			113                     g_ptr_array_add(gtk_args,<br>
			(gdb) <b>list</b><br>
			108                     gtk_args = g_ptr_array_new();<br>
			109                     <br>
			110                     /* Note that the value of argv[0] passed to main() may be<br>
			111                      * different from the value that this passes to gtk<br>
			112                      */<br>
			113                     g_ptr_array_add(gtk_args,<br>
			114                                     (char *)poptGetInvocationName(con));<br>
			115                     break;<br>
			116                     <br>
			117             case POPT_CALLBACK_REASON_OPTION:<br>
			(gdb) <b>info locals</b><br>
			file_name = (gchar *) 0x40165904 &quot;&quot;<br>
			reason = POPT_CALLBACK_REASON_PRE<br>
			opt = (struct poptOption *) 0x80bb2a0<br>
			gnome_gtk_initialized = 0<br>
			gtk_args = (GPtrArray *) 0x80bb2b8<br>
			newstr = 0x40165904 &quot;&quot;<br>
			final_argc = 1074307343<br>
			final_argv = (char **) 0x4008e0e8<br>
			(gdb) <b>up</b><br>
			#2  0x4008a171 in invokeCallbacks (con=0x80bb070, table=0x401658e8, post=0) at popt.c:39<br>
			39                  cb(con, post ? POPT_CALLBACK_REASON_POST : POPT_CALLBACK_REASON_PRE,<br>
			(gdb) <br>
			</blockquote>

			<p>Et cetera. These commands might be pointless or you might not be able to even execute them,
			but if you can, send us this output as well. We will be forever in your debt.</p>
		</td>
	</tr>
</table>
</body>
